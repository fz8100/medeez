version: '3.8'

services:
  # DynamoDB Local for development
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: medeez-dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - dynamodb-data:/home/dynamodblocal/data
    working_dir: /home/dynamodblocal
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    networks:
      - medeez-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/shell/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # LocalStack for AWS services emulation
  localstack:
    image: localstack/localstack:latest
    container_name: medeez-localstack
    ports:
      - "4566:4566"
      - "4571:4571"
    environment:
      - SERVICES=s3,kms,secretsmanager,ssm,ses,events,lambda,apigateway,cognito-idp
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - LAMBDA_EXECUTOR=docker
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - PERSISTENCE=1
    volumes:
      - "./docker/localstack:/etc/localstack/init/ready.d"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - localstack-data:/tmp/localstack
    networks:
      - medeez-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: medeez-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - medeez-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API service (Express on Node.js)
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.dev
    container_name: medeez-api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - LOG_LEVEL=debug
      - DYNAMO_ENDPOINT=http://dynamodb-local:8000
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - REDIS_URL=redis://redis:6379
      - LOCALSTACK_ENDPOINT=http://localstack:4566
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3002
    volumes:
      - ./apps/api:/app
      - /app/node_modules
      - ./packages:/packages
    depends_on:
      dynamodb-local:
        condition: service_healthy
      localstack:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - medeez-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Web application (Next.js)
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.dev
    container_name: medeez-web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001/api/v1
      - NEXT_PUBLIC_APP_ENV=development
      - NEXT_PUBLIC_COGNITO_REGION=us-east-1
      - NEXT_PUBLIC_COGNITO_USER_POOL_ID=local_pool_id
      - NEXT_PUBLIC_COGNITO_USER_POOL_CLIENT_ID=local_client_id
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
      - ./packages:/packages
    depends_on:
      api:
        condition: service_healthy
    networks:
      - medeez-network
    restart: unless-stopped

  # Admin dashboard (optional)
  admin:
    build:
      context: ./apps/admin
      dockerfile: Dockerfile.dev
    container_name: medeez-admin
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - NEXT_PUBLIC_API_URL=http://localhost:3001/api/v1
      - NEXT_PUBLIC_APP_ENV=development
    volumes:
      - ./apps/admin:/app
      - /app/node_modules
      - /app/.next
      - ./packages:/packages
    depends_on:
      api:
        condition: service_healthy
    networks:
      - medeez-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: medeez-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
      - api
      - admin
    networks:
      - medeez-network
    restart: unless-stopped

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: medeez-mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - medeez-network

  # Database admin UI
  dynamodb-admin:
    image: aaronshaf/dynamodb-admin:latest
    container_name: medeez-dynamodb-admin
    ports:
      - "8001:8001"
    environment:
      - DYNAMO_ENDPOINT=http://dynamodb-local:8000
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    depends_on:
      dynamodb-local:
        condition: service_healthy
    networks:
      - medeez-network

  # Redis admin UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: medeez-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - medeez-network

networks:
  medeez-network:
    driver: bridge
    name: medeez-network

volumes:
  dynamodb-data:
    driver: local
  localstack-data:
    driver: local
  redis-data:
    driver: local