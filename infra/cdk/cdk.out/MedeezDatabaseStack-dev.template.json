{
 "Resources": {
  "MedeezTable211EA93D": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "PK",
      "AttributeType": "S"
     },
     {
      "AttributeName": "SK",
      "AttributeType": "S"
     },
     {
      "AttributeName": "GSI1PK",
      "AttributeType": "S"
     },
     {
      "AttributeName": "GSI1SK",
      "AttributeType": "S"
     },
     {
      "AttributeName": "GSI2PK",
      "AttributeType": "S"
     },
     {
      "AttributeName": "GSI2SK",
      "AttributeType": "S"
     },
     {
      "AttributeName": "GSI3PK",
      "AttributeType": "S"
     },
     {
      "AttributeName": "GSI3SK",
      "AttributeType": "S"
     },
     {
      "AttributeName": "GSI4PK",
      "AttributeType": "S"
     },
     {
      "AttributeName": "GSI4SK",
      "AttributeType": "S"
     },
     {
      "AttributeName": "GSI5PK",
      "AttributeType": "S"
     },
     {
      "AttributeName": "GSI5SK",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "GSI1",
      "KeySchema": [
       {
        "AttributeName": "GSI1PK",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "GSI1SK",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     },
     {
      "IndexName": "GSI2",
      "KeySchema": [
       {
        "AttributeName": "GSI2PK",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "GSI2SK",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     },
     {
      "IndexName": "GSI3",
      "KeySchema": [
       {
        "AttributeName": "GSI3PK",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "GSI3SK",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     },
     {
      "IndexName": "GSI4",
      "KeySchema": [
       {
        "AttributeName": "GSI4PK",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "GSI4SK",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     },
     {
      "IndexName": "GSI5",
      "KeySchema": [
       {
        "AttributeName": "GSI5PK",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "GSI5SK",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "PK",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "SK",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "SSEEnabled": false
    },
    "StreamSpecification": {
     "StreamViewType": "NEW_AND_OLD_IMAGES"
    },
    "TableName": "medeez-dev-app",
    "Tags": [
     {
      "Key": "Compliance",
      "Value": "HIPAA"
     },
     {
      "Key": "CostCenter",
      "Value": "Engineering"
     },
     {
      "Key": "Environment",
      "Value": "dev"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Project",
      "Value": "Medeez"
     }
    ],
    "TimeToLiveSpecification": {
     "AttributeName": "ttl",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/MedeezTable/Resource"
   }
  },
  "MedeezBucketKey6E17318B": {
   "Type": "AWS::KMS::Key",
   "Properties": {
    "Description": "Created by MedeezDatabaseStack-dev/MedeezBucket",
    "EnableKeyRotation": true,
    "KeyPolicy": {
     "Statement": [
      {
       "Action": "kms:*",
       "Effect": "Allow",
       "Principal": {
        "AWS": "arn:aws:iam::777402107692:root"
       },
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Compliance",
      "Value": "HIPAA"
     },
     {
      "Key": "CostCenter",
      "Value": "Engineering"
     },
     {
      "Key": "Environment",
      "Value": "dev"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Project",
      "Value": "Medeez"
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/MedeezBucket/Key/Resource"
   }
  },
  "MedeezBucket38136D94": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "KMSMasterKeyID": {
         "Fn::GetAtt": [
          "MedeezBucketKey6E17318B",
          "Arn"
         ]
        },
        "SSEAlgorithm": "aws:kms"
       }
      }
     ]
    },
    "BucketName": "medeez-dev-attachments-777402107692",
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "GET",
        "POST",
        "PUT",
        "DELETE"
       ],
       "AllowedOrigins": [
        "https://dev.medeez.com",
        "https://www.dev.medeez.com",
        "https://book.dev.medeez.com"
       ],
       "MaxAge": 3600
      }
     ]
    },
    "LifecycleConfiguration": {
     "Rules": [
      {
       "AbortIncompleteMultipartUpload": {
        "DaysAfterInitiation": 7
       },
       "Id": "DeleteIncompleteMultipartUploads",
       "Status": "Enabled"
      },
      {
       "Id": "TransitionToIA",
       "Status": "Enabled",
       "Transitions": [
        {
         "StorageClass": "STANDARD_IA",
         "TransitionInDays": 30
        },
        {
         "StorageClass": "GLACIER",
         "TransitionInDays": 90
        }
       ]
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "Compliance",
      "Value": "HIPAA"
     },
     {
      "Key": "CostCenter",
      "Value": "Engineering"
     },
     {
      "Key": "Environment",
      "Value": "dev"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Project",
      "Value": "Medeez"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/MedeezBucket/Resource"
   }
  },
  "MedeezBucketPolicy4E4444D0": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "MedeezBucket38136D94"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "MedeezBucket38136D94",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "MedeezBucket38136D94",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/MedeezBucket/Policy/Resource"
   }
  },
  "MedeezBucketNotificationsFC473F3A": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "MedeezBucket38136D94"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "prefix",
           "Value": "uploads/"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "S3EventProcessorF5A4DF2D",
         "Arn"
        ]
       }
      },
      {
       "Events": [
        "s3:ObjectRemoved:*"
       ],
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "S3EventProcessorF5A4DF2D",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "MedeezBucketAllowBucketNotificationsToMedeezDatabaseStackdevS3EventProcessor58197EFD7B410CDA",
    "MedeezBucketPolicy4E4444D0"
   ],
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/MedeezBucket/Notifications/Resource"
   }
  },
  "MedeezBucketAllowBucketNotificationsToMedeezDatabaseStackdevS3EventProcessor58197EFD7B410CDA": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "S3EventProcessorF5A4DF2D",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": "777402107692",
    "SourceArn": {
     "Fn::GetAtt": [
      "MedeezBucket38136D94",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/MedeezBucket/AllowBucketNotificationsToMedeezDatabaseStackdevS3EventProcessor58197EFD"
   }
  },
  "S3EventProcessorServiceRole3A47C8C9": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Compliance",
      "Value": "HIPAA"
     },
     {
      "Key": "CostCenter",
      "Value": "Engineering"
     },
     {
      "Key": "Environment",
      "Value": "dev"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Project",
      "Value": "Medeez"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/S3EventProcessor/ServiceRole/Resource"
   }
  },
  "S3EventProcessorServiceRoleDefaultPolicy39A2E3AF": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "MedeezTable211EA93D",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "MedeezTable211EA93D",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "S3EventProcessorServiceRoleDefaultPolicy39A2E3AF",
    "Roles": [
     {
      "Ref": "S3EventProcessorServiceRole3A47C8C9"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/S3EventProcessor/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "S3EventProcessorF5A4DF2D": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\n        exports.handler = async (event) => {\n          console.log('S3 Event:', JSON.stringify(event, null, 2));\n          \n          for (const record of event.Records) {\n            const bucket = record.s3.bucket.name;\n            const key = record.s3.object.key;\n            const eventName = record.eventName;\n            \n            console.log(`Processing ${eventName} for ${bucket}/${key}`);\n            \n            // Add your custom logic here for:\n            // - Image processing/thumbnails\n            // - PDF generation\n            // - Virus scanning\n            // - Audit logging\n          }\n          \n          return { statusCode: 200, body: 'Processed successfully' };\n        };\n      "
    },
    "Environment": {
     "Variables": {
      "DYNAMO_TABLE_NAME": {
       "Ref": "MedeezTable211EA93D"
      },
      "KMS_KEY_ID": "default",
      "ENVIRONMENT": "dev"
     }
    },
    "FunctionName": "medeez-dev-s3-processor",
    "Handler": "index.handler",
    "MemorySize": 512,
    "Role": {
     "Fn::GetAtt": [
      "S3EventProcessorServiceRole3A47C8C9",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Tags": [
     {
      "Key": "Compliance",
      "Value": "HIPAA"
     },
     {
      "Key": "CostCenter",
      "Value": "Engineering"
     },
     {
      "Key": "Environment",
      "Value": "dev"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Project",
      "Value": "Medeez"
     }
    ],
    "Timeout": 300
   },
   "DependsOn": [
    "S3EventProcessorServiceRoleDefaultPolicy39A2E3AF",
    "S3EventProcessorServiceRole3A47C8C9"
   ],
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/S3EventProcessor/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Compliance",
      "Value": "HIPAA"
     },
     {
      "Key": "CostCenter",
      "Value": "Engineering"
     },
     {
      "Key": "Environment",
      "Value": "dev"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Project",
      "Value": "Medeez"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300,
    "Tags": [
     {
      "Key": "Compliance",
      "Value": "HIPAA"
     },
     {
      "Key": "CostCenter",
      "Value": "Engineering"
     },
     {
      "Key": "Environment",
      "Value": "dev"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Project",
      "Value": "Medeez"
     }
    ]
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "StreamProcessorServiceRole38F6612A": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Compliance",
      "Value": "HIPAA"
     },
     {
      "Key": "CostCenter",
      "Value": "Engineering"
     },
     {
      "Key": "Environment",
      "Value": "dev"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Project",
      "Value": "Medeez"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/StreamProcessor/ServiceRole/Resource"
   }
  },
  "StreamProcessorServiceRoleDefaultPolicy25F89E31": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "dynamodb:ListStreams",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:DescribeStream",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "MedeezTable211EA93D",
         "StreamArn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "StreamProcessorServiceRoleDefaultPolicy25F89E31",
    "Roles": [
     {
      "Ref": "StreamProcessorServiceRole38F6612A"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/StreamProcessor/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "StreamProcessorA985C501": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\n        exports.handler = async (event) => {\n          console.log('DynamoDB Stream Event:', JSON.stringify(event, null, 2));\n          \n          for (const record of event.Records) {\n            const eventName = record.eventName;\n            const dynamodb = record.dynamodb;\n            \n            console.log(`Processing ${eventName} event`);\n            \n            // Add your custom logic here for:\n            // - Audit logging\n            // - Change notifications\n            // - Search index updates\n            // - Analytics events\n          }\n          \n          return { batchItemFailures: [] };\n        };\n      "
    },
    "Environment": {
     "Variables": {
      "ENVIRONMENT": "dev"
     }
    },
    "FunctionName": "medeez-dev-stream-processor",
    "Handler": "index.handler",
    "MemorySize": 256,
    "Role": {
     "Fn::GetAtt": [
      "StreamProcessorServiceRole38F6612A",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Tags": [
     {
      "Key": "Compliance",
      "Value": "HIPAA"
     },
     {
      "Key": "CostCenter",
      "Value": "Engineering"
     },
     {
      "Key": "Environment",
      "Value": "dev"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Project",
      "Value": "Medeez"
     }
    ],
    "Timeout": 300
   },
   "DependsOn": [
    "StreamProcessorServiceRoleDefaultPolicy25F89E31",
    "StreamProcessorServiceRole38F6612A"
   ],
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/StreamProcessor/Resource"
   }
  },
  "StreamProcessorStreamEventSourceMapping364C6083": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "BatchSize": 10,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "MedeezTable211EA93D",
      "StreamArn"
     ]
    },
    "FunctionName": {
     "Ref": "StreamProcessorA985C501"
    },
    "MaximumBatchingWindowInSeconds": 5,
    "MaximumRetryAttempts": 3,
    "StartingPosition": "TRIM_HORIZON",
    "Tags": [
     {
      "Key": "Compliance",
      "Value": "HIPAA"
     },
     {
      "Key": "CostCenter",
      "Value": "Engineering"
     },
     {
      "Key": "Environment",
      "Value": "dev"
     },
     {
      "Key": "ManagedBy",
      "Value": "CDK"
     },
     {
      "Key": "Project",
      "Value": "Medeez"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/StreamProcessor/StreamEventSourceMapping/Resource"
   }
  },
  "DynamoTableNameParameterB6EB567B": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "Description": "DynamoDB table name",
    "Name": "/medeez/dev/dynamo/table-name",
    "Tags": {
     "Compliance": "HIPAA",
     "CostCenter": "Engineering",
     "Environment": "dev",
     "ManagedBy": "CDK",
     "Project": "Medeez"
    },
    "Type": "String",
    "Value": {
     "Ref": "MedeezTable211EA93D"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/DynamoTableNameParameter/Resource"
   }
  },
  "S3BucketNameParameterBD2DA13F": {
   "Type": "AWS::SSM::Parameter",
   "Properties": {
    "Description": "S3 bucket name for attachments",
    "Name": "/medeez/dev/s3/bucket-name",
    "Tags": {
     "Compliance": "HIPAA",
     "CostCenter": "Engineering",
     "Environment": "dev",
     "ManagedBy": "CDK",
     "Project": "Medeez"
    },
    "Type": "String",
    "Value": {
     "Ref": "MedeezBucket38136D94"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/S3BucketNameParameter/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2WPzWrDMBCEnyV3eZs4h9xr2ksoNU7uZS2vg2JrZfSTYITevVhumkJP8+0MDLMllLs9bDd4d4XshmJULcSTRzkIvLuv2M2M2nQtxDO2I4mq5wxJuD3E1yAH8ov5Q6vUZlRyftrrncSgHcQj5eRIcxIj6rZDiFXPNVmtnFOGxXtg6Reoev7ltxuxP5lgJX3gNCm+LPF/NwmFGmJj1rFZn3seS5zTy5tW8aVGi5o82Zw/jpREQy4X55o//Bn8FHwSbDqCq3u5lSXsDrDdXJ1ShQ3slSZoVv0GtNLzIWABAAA="
   },
   "Metadata": {
    "aws:cdk:path": "MedeezDatabaseStack-dev/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "DynamoTableName": {
   "Description": "DynamoDB table name",
   "Value": {
    "Ref": "MedeezTable211EA93D"
   },
   "Export": {
    "Name": "MedeezDynamoTableName-dev"
   }
  },
  "S3BucketName": {
   "Description": "S3 bucket name for attachments",
   "Value": {
    "Ref": "MedeezBucket38136D94"
   },
   "Export": {
    "Name": "MedeezS3BucketName-dev"
   }
  },
  "DynamoTableStreamArn": {
   "Description": "DynamoDB table stream ARN",
   "Value": {
    "Fn::GetAtt": [
     "MedeezTable211EA93D",
     "StreamArn"
    ]
   },
   "Export": {
    "Name": "MedeezDynamoTableStreamArn-dev"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}