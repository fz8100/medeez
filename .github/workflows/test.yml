name: Test Suite

on:
  push:
    branches: [main, dev, staging]
  pull_request:
    branches: [main, dev, staging]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [web, api, packages/types, packages/ui]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests for ${{ matrix.workspace }}
        run: pnpm --filter=${{ matrix.workspace }} test:unit --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./${{ matrix.workspace }}/coverage/lcov.info
          flags: ${{ matrix.workspace }}
          name: ${{ matrix.workspace }}-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - 8000:8000
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          node scripts/database-migration.js create dev
          node scripts/database-migration.js seed dev
        env:
          AWS_REGION: us-east-1
          DYNAMO_ENDPOINT: http://localhost:8000

      - name: Run integration tests
        run: pnpm test:integration
        env:
          NODE_ENV: test
          DYNAMO_ENDPOINT: http://localhost:8000
          REDIS_URL: redis://localhost:6379
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    services:
      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - 8000:8000
      localstack:
        image: localstack/localstack
        ports:
          - 4566:4566
        env:
          SERVICES: s3,kms,secretsmanager,cognito-idp
          DEBUG: 1
          PERSISTENCE: 0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test environment
        run: |
          # Wait for services
          timeout 60 bash -c 'until curl -s http://localhost:8000/shell/ >/dev/null; do sleep 1; done'
          timeout 60 bash -c 'until curl -s http://localhost:4566/_localstack/health >/dev/null; do sleep 1; done'
          
          # Setup database
          node scripts/database-migration.js create dev
          node scripts/database-migration.js seed dev

      - name: Start API server
        run: |
          cd apps/api
          pnpm dev &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          
          # Wait for API to start
          timeout 30 bash -c 'until curl -s http://localhost:3001/health >/dev/null; do sleep 1; done'
        env:
          NODE_ENV: test
          PORT: 3001
          DYNAMO_ENDPOINT: http://localhost:8000
          LOCALSTACK_ENDPOINT: http://localhost:4566
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test

      - name: Run API tests with Newman
        run: |
          npx newman run tests/postman/medeez-api.postman_collection.json \
            --environment tests/postman/test.postman_environment.json \
            --reporters cli,junit \
            --reporter-junit-export test-results/api-tests.xml

      - name: Stop API server
        if: always()
        run: |
          if [ ! -z "$API_PID" ]; then
            kill $API_PID || true
          fi

      - name: Upload API test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-test-results
          path: test-results/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    services:
      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - 8000:8000
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps

      - name: Setup test environment
        run: |
          # Setup database
          node scripts/database-migration.js create dev
          node scripts/database-migration.js seed dev
        env:
          DYNAMO_ENDPOINT: http://localhost:8000

      - name: Build applications
        run: |
          pnpm build --filter=api
          pnpm build --filter=web

      - name: Start applications
        run: |
          # Start API
          cd apps/api
          pnpm start &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          
          # Start Web
          cd ../web
          pnpm start &
          WEB_PID=$!
          echo "WEB_PID=$WEB_PID" >> $GITHUB_ENV
          
          # Wait for services
          timeout 30 bash -c 'until curl -s http://localhost:3001/health >/dev/null; do sleep 1; done'
          timeout 30 bash -c 'until curl -s http://localhost:3000 >/dev/null; do sleep 1; done'
        env:
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: http://localhost:3001/api/v1
          DYNAMO_ENDPOINT: http://localhost:8000
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test

      - name: Run Playwright tests
        run: pnpm test:e2e
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:3001/api/v1

      - name: Stop applications
        if: always()
        run: |
          if [ ! -z "$API_PID" ]; then kill $API_PID || true; fi
          if [ ! -z "$WEB_PID" ]; then kill $WEB_PID || true; fi

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          k6 run tests/performance/load-test.js \
            --env BASE_URL=https://api-dev.medeez.com \
            --out json=test-results/load-test.json
        continue-on-error: true

      - name: Run stress tests
        run: |
          k6 run tests/performance/stress-test.js \
            --env BASE_URL=https://api-dev.medeez.com \
            --out json=test-results/stress-test.json
        continue-on-error: true

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: test-results/

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build web application
        run: pnpm build --filter=web

      - name: Start web application
        run: |
          cd apps/web
          pnpm start &
          WEB_PID=$!
          echo "WEB_PID=$WEB_PID" >> $GITHUB_ENV
          
          # Wait for application to start
          timeout 30 bash -c 'until curl -s http://localhost:3000 >/dev/null; do sleep 1; done'

      - name: Run accessibility tests with axe
        run: |
          npx @axe-core/cli http://localhost:3000 \
            --save test-results/accessibility-report.json \
            --reporter json

      - name: Run Lighthouse audit
        run: |
          npx lighthouse http://localhost:3000 \
            --output json \
            --output-path test-results/lighthouse-report.json \
            --only-categories accessibility,best-practices,seo \
            --chrome-flags="--headless --no-sandbox"

      - name: Stop web application
        if: always()
        run: |
          if [ ! -z "$WEB_PID" ]; then kill $WEB_PID || true; fi

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-test-results
          path: test-results/

  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps

      - name: Build web application
        run: pnpm build --filter=web

      - name: Start web application
        run: |
          cd apps/web
          pnpm start &
          WEB_PID=$!
          echo "WEB_PID=$WEB_PID" >> $GITHUB_ENV
          
          # Wait for application to start
          timeout 30 bash -c 'until curl -s http://localhost:3000 >/dev/null; do sleep 1; done'

      - name: Run mobile tests
        run: pnpm test:mobile
        env:
          BASE_URL: http://localhost:3000

      - name: Stop web application
        if: always()
        run: |
          if [ ! -z "$WEB_PID" ]; then kill $WEB_PID || true; fi

      - name: Upload mobile test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mobile-test-results
          path: |
            test-results/
            playwright-report/

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, e2e-tests]
    if: always()
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "# Test Summary Report" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Results" >> test-summary.md
          echo "" >> test-summary.md
          echo "| Test Suite | Status |" >> test-summary.md
          echo "|------------|--------|" >> test-summary.md
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> test-summary.md
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> test-summary.md
          echo "| API Tests | ${{ needs.api-tests.result }} |" >> test-summary.md
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> test-summary.md
          
          if [ -d "performance-test-results" ]; then
            echo "| Performance Tests | Available |" >> test-summary.md
          fi
          
          if [ -d "accessibility-test-results" ]; then
            echo "| Accessibility Tests | Available |" >> test-summary.md
          fi
          
          if [ -d "mobile-test-results" ]; then
            echo "| Mobile Tests | Available |" >> test-summary.md
          fi

      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary-report
          path: test-summary.md

      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  notify-on-failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, e2e-tests]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#test-failures'
          text: |
            🚨 Test suite failed for Medeez
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
            
            Failed jobs:
            - Unit Tests: ${{ needs.unit-tests.result }}
            - Integration Tests: ${{ needs.integration-tests.result }}
            - API Tests: ${{ needs.api-tests.result }}
            - E2E Tests: ${{ needs.e2e-tests.result }}
            
            Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}