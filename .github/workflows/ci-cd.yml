name: 'Medeez v2 CI/CD Pipeline'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.15.0'
  
jobs:
  # Security and vulnerability scanning
  security-scan:
    name: 'Security & Vulnerability Scan'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run security audit
        run: |
          pnpm audit --audit-level moderate
          pnpm dlx audit-ci --moderate

  # Code quality and linting
  code-quality:
    name: 'Code Quality & Linting'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Type checking
        run: pnpm type-check
        
      - name: Linting
        run: pnpm lint
        
      - name: Code formatting check
        run: pnpm format:check

  # API testing
  api-tests:
    name: 'API Unit & Integration Tests'
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Setup test environment
        run: |
          cp apps/api/.env.test apps/api/.env
          
      - name: Run API unit tests
        run: pnpm --filter @medeez/api test:ci
        
      - name: Run security tests
        run: pnpm --filter @medeez/api test:security

  # Frontend testing
  frontend-tests:
    name: 'Frontend Unit & Component Tests'
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Setup test environment
        run: |
          cp apps/web/.env.test apps/web/.env.local
          
      - name: Run frontend unit tests
        run: pnpm --filter @medeez/web test --coverage --watchAll=false

  # E2E testing
  e2e-tests:
    name: 'End-to-End Tests'
    runs-on: ubuntu-latest
    needs: [api-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Install Playwright browsers
        run: pnpm dlx playwright install --with-deps
        
      - name: Build applications
        run: |
          pnpm build
          
      - name: Setup E2E test environment
        run: |
          cp .env.e2e .env
          
      - name: Run E2E tests
        run: pnpm dlx playwright test

  # HIPAA compliance reporting
  compliance-report:
    name: 'HIPAA Compliance Report'
    runs-on: ubuntu-latest
    needs: [security-scan, api-tests, frontend-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate compliance report
        run: |
          echo "# HIPAA Compliance Test Report" > compliance-report.md
          echo "Date: $(date)" >> compliance-report.md
          echo "Commit: ${{ github.sha }}" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "## Test Results" >> compliance-report.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> compliance-report.md
          echo "- API Tests: ${{ needs.api-tests.result }}" >> compliance-report.md
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> compliance-report.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "## Compliance Status" >> compliance-report.md
          if [[ "${{ needs.security-scan.result }}" == "success" && "${{ needs.api-tests.result }}" == "success" ]]; then
            echo "✅ HIPAA Compliance: PASSED" >> compliance-report.md
          else
            echo "❌ HIPAA Compliance: FAILED" >> compliance-report.md
          fi
          
      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: hipaa-compliance-report
          path: compliance-report.md
