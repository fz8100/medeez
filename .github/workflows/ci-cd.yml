name: Medeez CI/CD Pipeline

on:
  push:
    branches: [main, dev, staging]
  pull_request:
    branches: [main, dev, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Secrets scanning with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Run TypeScript type checking
        run: pnpm type-check

      - name: Run unit tests
        run: pnpm test:unit

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        app: [web, api]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build ${{ matrix.app }}
        run: pnpm build --filter=${{ matrix.app }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-build
          path: |
            apps/${{ matrix.app }}/dist
            apps/${{ matrix.app }}/.next
          retention-days: 1

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || (github.ref == 'refs/heads/staging' && 'staging' || 'dev') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Install dependencies
        working-directory: ./infra/cdk
        run: pnpm install --frozen-lockfile

      - name: CDK Bootstrap
        working-directory: ./infra/cdk
        run: |
          npx cdk bootstrap \
            --context environment=${{ vars.ENVIRONMENT }} \
            --context domainName=${{ vars.DOMAIN_NAME }} \
            --context certificateArn=${{ vars.CERTIFICATE_ARN }}

      - name: CDK Deploy
        working-directory: ./infra/cdk
        run: |
          npx cdk deploy --all --require-approval never \
            --context environment=${{ vars.ENVIRONMENT }} \
            --context domainName=${{ vars.DOMAIN_NAME }} \
            --context certificateArn=${{ vars.CERTIFICATE_ARN }}

      - name: Save deployment outputs
        working-directory: ./infra/cdk
        run: |
          npx cdk list --json > cdk-outputs.json
          aws s3 cp cdk-outputs.json s3://${{ vars.DEPLOYMENT_BUCKET }}/outputs/${{ github.sha }}/

  deploy-applications:
    name: Deploy Applications
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || (github.ref == 'refs/heads/staging' && 'staging' || 'dev') }}
    strategy:
      matrix:
        app: [web, api]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.app }}-build
          path: apps/${{ matrix.app }}/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Deploy API to Lambda
        if: matrix.app == 'api'
        run: |
          cd apps/api
          zip -r deployment.zip dist/ node_modules/ package.json
          aws lambda update-function-code \
            --function-name medeez-${{ vars.ENVIRONMENT }}-api \
            --zip-file fileb://deployment.zip

      - name: Deploy Web to Amplify
        if: matrix.app == 'web'
        run: |
          aws amplify start-deployment \
            --app-id ${{ vars.AMPLIFY_APP_ID }} \
            --branch-name ${{ vars.ENVIRONMENT }}

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  run-e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: deploy-applications
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging'
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || (github.ref == 'refs/heads/staging' && 'staging' || 'dev') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: pnpm playwright install --with-deps

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          BASE_URL: ${{ vars.BASE_URL }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/

  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    needs: deploy-applications
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Run cost analysis
        run: |
          python3 scripts/cost-analysis.py \
            --environment ${{ vars.ENVIRONMENT }} \
            --threshold 100 \
            --output cost-report.json

      - name: Upload cost report
        uses: actions/upload-artifact@v3
        with:
          name: cost-analysis-${{ vars.ENVIRONMENT }}
          path: cost-report.json

      - name: Comment cost analysis on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const costReport = JSON.parse(fs.readFileSync('cost-report.json', 'utf8'));
            
            const comment = `## 💰 Cost Analysis Report
            
            **Environment**: ${{ vars.ENVIRONMENT }}
            **Total Monthly Cost**: $${costReport.totalCost}
            **Cost per Doctor**: $${costReport.costPerDoctor}
            
            ### Service Breakdown:
            ${costReport.services.map(s => `- ${s.name}: $${s.cost}`).join('\n')}
            
            ${costReport.recommendations.length > 0 ? 
              `### Recommendations:\n${costReport.recommendations.map(r => `- ${r}`).join('\n')}` : 
              '✅ All costs within acceptable ranges'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-applications, run-e2e-tests, cost-analysis]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging')
    steps:
      - name: Notify Slack on Success
        if: needs.deploy-applications.result == 'success' && needs.run-e2e-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            ✅ Medeez deployment successful!
            Environment: ${{ vars.ENVIRONMENT }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: needs.deploy-applications.result == 'failure' || needs.run-e2e-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ❌ Medeez deployment failed!
            Environment: ${{ vars.ENVIRONMENT }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
            Check: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update deployment status
        run: |
          echo "Deployment completed at $(date)" >> $GITHUB_STEP_SUMMARY
          echo "Environment: ${{ vars.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY